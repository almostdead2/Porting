name: Android ROM Porting

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'Direct URL to the OnePlus Firmware ZIP file'
        required: true
        default: 'https://example.com/your_oneplus_firmware.zip'

jobs:
  port_rom:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y unace unrar zip unzip p7zip-full liblz4-tool brotli default-jre
          sudo apt install -y libarchive-tools
          sudo apt install -y android-sdk-libsparse-utils
          sudo apt install -y e2fsprogs

          pip install protobuf

          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O apktool
          wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar -O apktool.jar
          chmod +x apktool apktool.jar
          sudo mv apktool /usr/local/bin/
          sudo mv apktool.jar /usr/local/bin/

          echo "Apktool installed successfully."

      - name: Clean Apktool Framework Directory
        run: |
          echo "Emptying Apktool framework directory to ensure a clean slate..."
          sudo apktool empty-framework-dir
          if [ $? -eq 0 ]; then
            echo "Apktool framework directory cleared successfully."
          else
            echo "Warning: apktool empty-framework-dir command completed with a non-zero exit code. This might indicate nothing was there to clean, or a minor issue. Proceeding."
          fi

      - name: Install Apktool Frameworks
        run: |
          echo "Installing Apktool frameworks..."
          FRAMEWORK_APK="/home/runner/work/Porting/Porting/system/framework/framework-res.apk"
          if [ -f "$FRAMEWORK_APK" ]; then
            sudo apktool if "$FRAMEWORK_APK"
            if [ $? -ne 0 ]; then echo "Apktool framework installation failed! Check framework-res.apk path and file integrity."; exit 1; fi
            echo "Apktool framework installed successfully."
          else
            echo "Error: framework-res.apk not found at $FRAMEWORK_APK. Cannot install framework. Ensure your ROM files are correctly extracted."
            exit 1
          fi

      - name: Download OnePlus Firmware
        id: download_firmware
        run: |
          FIRMWARE_URL="${{ github.event.inputs.firmware_url }}"
          FIRMWARE_FILENAME=$(basename "$FIRMWARE_URL")
          echo "Downloading firmware from: $FIRMWARE_URL"
          wget -q --show-progress "$FIRMWARE_URL" -O "$FIRMWARE_FILENAME"
          if [ ! -f "$FIRMWARE_FILENAME" ]; then
            echo "Error: Firmware download failed."
            exit 1
          fi
          echo "Downloaded firmware: $FIRMWARE_FILENAME"
          echo "firmware_filename=$FIRMWARE_FILENAME" >> "$GITHUB_OUTPUT"

      - name: Extract Firmware
        id: extract_firmware
        run: |
          FIRMWARE_FILENAME="${{ steps.download_firmware.outputs.firmware_filename }}"
          mkdir -p firmware_extracted
          echo "Extracting $FIRMWARE_FILENAME..."
          if [[ "$FIRMWARE_FILENAME" == *.zip ]]; then
            unzip -q "$FIRMWARE_FILENAME" -d firmware_extracted/
          elif [[ "$FIRMWARE_FILENAME" == *.rar ]]; then
            unrar x "$FIRMWARE_FILENAME" firmware_extracted/
          elif [[ "$FIRMWARE_FILENAME" == *.7z ]]; then
            7z x "$FIRMWARE_FILENAME" -o firmware_extracted/
          else
            echo "Error: Unsupported firmware archive format."
            exit 1
          fi

          if [ ! -d "firmware_extracted" ] || [ -z "$(ls -A firmware_extracted)" ]; then
              echo "Error: Firmware extraction failed or directory is empty."
              exit 1
          fi
          echo "Firmware extracted to firmware_extracted/"

      - name: Extract Images from payload.bin (if present)
        run: |
          if [ -f firmware_extracted/payload.bin ]; then
            echo "payload.bin found. Extracting images using payload_dumper.py from vm03/payload_dumper.git..."

            PAYLOAD_DUMPER_DIR="payload_dumper"

            echo "Cloning https://github.com/vm03/payload_dumper.git into $PAYLOAD_DUMPER_DIR..."
            git clone https://github.com/vm03/payload_dumper.git "$PAYLOAD_DUMPER_DIR"
            if [ ! -d "$PAYLOAD_DUMPER_DIR" ]; then
              echo "Error: Failed to clone vm03/payload_dumper repository."
              exit 1
            fi

            if [ -f "$PAYLOAD_DUMPER_DIR/requirements.txt" ]; then
              echo "Installing payload_dumper requirements from $PAYLOAD_DUMPER_DIR/requirements.txt..."
              python3 -m pip install -r "$PAYLOAD_DUMPER_DIR/requirements.txt"
              if [ $? -ne 0 ]; then
                echo "Error: Failed to install payload_dumper requirements."
                rm -rf "$PAYLOAD_DUMPER_DIR"
                exit 1
              fi
            else
              echo "Warning: No requirements.txt found in $PAYLOAD_DUMPER_DIR. Skipping pip install for this repo."
            fi

            echo "Running payload_dumper.py from $PAYLOAD_DUMPER_DIR/payload_dumper.py..."
            python3 "$PAYLOAD_DUMPER_DIR/payload_dumper.py" firmware_extracted/payload.bin
            
            if [ $? -ne 0 ]; then
                echo "Error: payload_dumper.py failed to extract images."
                rm -rf "$PAYLOAD_DUMPER_DIR"
                exit 1
            fi
            
            echo "Images extracted from payload.bin to firmware_extracted/extracted_payload"
            rm -rf "$PAYLOAD_DUMPER_DIR"
          else
            echo "payload.bin not found. Proceeding with direct image files."
          fi

      - name: Consolidate and Select Required Images
        run: |
          REQUIRED_IMAGES=("system.img" "product.img" "system_ext.img" "odm.img" "vendor.img" "boot.img")
          OPTIONAL_IMAGES=("opproduct.img")
          ALL_IMAGES_FOUND=true
          TARGET_DIR="firmware_images"
          mkdir -p "$TARGET_DIR"

          for img in "${REQUIRED_IMAGES[@]}"; do
            if [ -f "/home/runner/work/Porting/Porting/output/$img" ]; then
              echo "Found $img"
              mv "/home/runner/work/Porting/Porting/output/$img" "$TARGET_DIR/"
            else
              echo "Warning: Required image $img not found."
              ALL_IMAGES_FOUND=false
            fi
          done

          for img in "${OPTIONAL_IMAGES[@]}"; do
            if [ -f "/home/runner/work/Porting/Porting/output/$img" ]; then
              echo "Found optional image $img"
              mv "/home/runner/work/Porting/Porting/output/$img" "$TARGET_DIR/"
            else
              echo "Optional image $img not found."
            fi
          done

          rm -rf firmware_extracted/*
          echo "Only required and optional images moved to $TARGET_DIR/. Others deleted."

          if ! $ALL_IMAGES_FOUND; then
            echo "Error: One or more required images were not found. Exiting."
            exit 1
          fi

      - name: Extract system, system_ext, product, odm, opproduct images (Mounting)
        run: |
          extract_image_via_mount() {
            local img_file="$1"
            local target_dir="$2"
            local mount_point="${target_dir}_mount"

            echo "Mounting and extracting $img_file to $target_dir/..."
            mkdir -p "$mount_point"

            if [ ! -f "firmware_images/$img_file" ]; then
              echo "Warning: Image file firmware_images/$img_file not found. Skipping extraction for this image."
              return 0
            fi

            LOOP_DEV=$(sudo losetup -f --show "firmware_images/$img_file")
            if [ -z "$LOOP_DEV" ]; then
              echo "Error: Failed to assign loop device for $img_file."
              return 1
            fi
            echo "Loop device assigned for $img_file: $LOOP_DEV"

            sudo mount -t ext4 -o ro "$LOOP_DEV" "$mount_point"
            if [ $? -ne 0 ]; then
              echo "Error: Failed to mount $img_file. Trying to detach loop device."
              sudo losetup -d "$LOOP_DEV"
              return 1
            fi
            echo "Mounted $img_file to $mount_point/."

            mkdir -p "$target_dir"
            
            echo "Copying contents from $mount_point/ to $target_dir/..."
            sudo cp -a "$mount_point/." "$target_dir/"
            if [ $? -ne 0 ]; then
              echo "Error: Failed to copy contents from $img_file."
              sudo umount "$mount_point"
              sudo losetup -d "$LOOP_DEV"
              return 1
            fi

            sudo umount "$mount_point"
            echo "Unmounted $mount_point."
            sudo losetup -d "$LOOP_DEV"
            echo "Detached loop device $LOOP_DEV."
            rmdir "$mount_point"
            echo "Successfully extracted $img_file."
            return 0
          }

          extract_image_via_mount "system.img" "system" || exit 1
          extract_image_via_mount "system_ext.img" "system_ext" || exit 1
          extract_image_via_mount "product.img" "product" || exit 1
          extract_image_via_mount "odm.img" "odm" || exit 1

          if [ -f "firmware_images/opproduct.img" ]; then
            extract_image_via_mount "opproduct.img" "opproduct" || exit 1
          else
            echo "opproduct.img not found. Skipping extraction."
          fi

      - name: Merge System Partitions
        run: |
          echo "Copying system_ext/ contents to system/system_ext..."
          mkdir -p system/system_ext
          sudo cp -r system_ext/* system/system_ext/
          if [ $? -ne 0 ]; then echo "Copy system_ext failed"; exit 1; fi

          echo "Copying product/ contents to system/product..."
          mkdir -p system/product
          sudo cp -r product/* system/product/
          if [ $? -ne 0 ]; then echo "Copy product failed"; exit 1; fi

          echo "All partition contents merged into system/."

      - name: Replace init Binary (from repo)
        run: |
          SOURCE_INIT_PATH="${{ github.workspace }}/my_init_files/init"

          INIT_TARGET_PATH="system/system/bin/init"

          if [ ! -f "$SOURCE_INIT_PATH" ]; then
            echo "Warning: Custom init binary not found at $SOURCE_INIT_PATH."
            echo "Skipping init replacement. If you intended to replace init, please place your 'init' file in the 'my_init_files' directory in your repository root."
            exit 0 
          fi

          echo "Custom init binary found at $SOURCE_INIT_PATH."

          if [ -f "$INIT_TARGET_PATH" ]; then
            echo "Deleting old init: $INIT_TARGET_PATH"
            sudo rm "$INIT_TARGET_PATH"
          else
            echo "Old init not found at $INIT_TARGET_PATH, will place new one."
          fi

          echo "Copying new init from $SOURCE_INIT_PATH to $INIT_TARGET_PATH and setting permissions."
          sudo cp "$SOURCE_INIT_PATH" "$INIT_TARGET_PATH"
          sudo chown 1000:1000 "$INIT_TARGET_PATH"
          sudo chmod 0755 "$INIT_TARGET_PATH"
          echo "Init binary replaced and permissions set."

      - name: Fix permissions for build.prop
        run: |
          sudo chmod -R a+rwX system

      - name: Modify build.prop
        run: |
          ODT_BUILD_PROP="odm/etc/buildinfo/build.prop"
          OPPRODUCT_BUILD_PROP="opproduct/build.prop"
          SYSTEM_BUILD_PROP="system/system/build.prop"
          SOURCE_BUILD_PROP=""

          if [ -f "$ODT_BUILD_PROP" ]; then
            SOURCE_BUILD_PROP="$ODT_BUILD_PROP"
            echo "Found source build.prop at $ODT_BUILD_PROP. Using it for modification."
          elif [ -f "$OPPRODUCT_BUILD_PROP" ]; then
            SOURCE_BUILD_PROP="$OPPRODUCT_BUILD_PROP"
            echo "Warning: $ODT_BUILD_PROP not found. Using $OPPRODUCT_BUILD_PROP as source build.prop instead."
          else
            echo "Warning: Neither $ODT_BUILD_PROP nor $OPPRODUCT_BUILD_PROP found. Skipping build.prop modification."
            exit 0
          fi

          if [ ! -f "$SYSTEM_BUILD_PROP" ]; then
            echo "Error: $SYSTEM_BUILD_PROP not found. Cannot modify build.prop."
            exit 1
          fi

          echo "Extracting lines from $SOURCE_BUILD_PROP..."
          awk '/# autogenerated by oem_log_prop.sh/{flag=1} flag' "$SOURCE_BUILD_PROP" > tmp_lines.txt

          if [ ! -s tmp_lines.txt ]; then
            echo "Warning: No lines found to copy from $SOURCE_BUILD_PROP starting from '# autogenerated by oem_log_prop.sh'. Skipping build.prop modification."
            rm -f tmp_lines.txt
            exit 0
          fi

          echo "Appending lines to $SYSTEM_BUILD_PROP..."
          awk '/# end build properties/ && !x {print; system("cat tmp_lines.txt"); x=1; next} 1' "$SYSTEM_BUILD_PROP" > tmp_build.prop && mv tmp_build.prop "$SYSTEM_BUILD_PROP"
          rm -f tmp_lines.txt

          echo "build.prop modified successfully."

      - name: Create empty keylayout files
        run: |
          KEYLAYOUT_DIR="system/usr/keylayout"
          sudo mkdir -p "$KEYLAYOUT_DIR"

          echo "Creating empty uinput-fpc.kl and uinput-goodix.kl..."
          sudo touch "$KEYLAYOUT_DIR/uinput-fpc.kl"
          sudo touch "$KEYLAYOUT_DIR/uinput-goodix.kl"
          echo "Keylayout files created."

      - name: Remove Unwanted Apps
        run: |
          echo "Attempting to remove unwanted apps from various partitions..."

          APPS_TO_REMOVE=(
            "OnePlusCamera"
            "Drive"
            "Duo"
            "Gmail2"
            "Maps"
            "Music2"
            "Photos"
            "GooglePay"
            "GoogleTTS"
            "Videos"
            "YouTube"
            "HotwordEnrollmentOKGoogleWCD9340"
            "HotwordEnrollmentXGoogleWCD9340"
            "Velvet"
            "By_3rd_PlayAutoInstallConfigOverSeas"
            "OPBackup"
            "OPForum"
          )

          declare -a APP_PATHS=(
            "system/app"
            "system/priv-app"
            "system/product/app"
            "system/product/priv-app"
            "system/system_ext/app"
            "system/system_ext/priv-app"
            "system/system/reserve"
          )

          for app_name in "${APPS_TO_REMOVE[@]}"; do
            APP_FOUND=false
            for app_path_base in "${APP_PATHS[@]}"; do
              TARGET_DIR="$app_path_base/$app_name"
              if [ -d "$TARGET_DIR" ]; then
                echo "Removing $TARGET_DIR..."
                sudo rm -rf "$TARGET_DIR"
                APP_FOUND=true
                break
              fi
            done
            if ! $APP_FOUND; then
              echo "Warning: App folder '$app_name' not found in common directories. Skipping."
            fi
          done

          echo "Unwanted apps removal attempt complete."

      - name: Patch services.jar (Smali Modification)
        run: |
          SERVICES_JAR_PATH="system/system/framework/services.jar"
          SMALI_DIR="system/system/framework/services" 
          SMALI_FILE="$SMALI_DIR/smali_classes2/com/android/server/wm/ActivityTaskManagerService\$LocalService.smali"

          if [ ! -f "$SERVICES_JAR_PATH" ]; then
            echo "Error: services.jar not found at $SERVICES_JAR_PATH."
            exit 1
          fi

          echo "Decompiling services.jar..."
          sudo apktool d -f -r "$SERVICES_JAR_PATH" -o "$SMALI_DIR"
          if [ $? -ne 0 ]; then echo "Apktool decompilation failed."; exit 1; fi

          if [ ! -f "$SMALI_FILE" ]; then
            echo "Error: Smali file not found at $SMALI_FILE. Decompilation might have failed or path is incorrect."
            exit 1
          fi

          echo "Applying smali modifications to $SMALI_FILE..."

          sudo sed -i '/invoke-static {}, Landroid\/os\/Build;->isBuildConsistent()Z/{
            n
            s/    move-result v1/    move-result v1\n\n    const\/4 v1, 0x1\n/
          }' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "First sed replacement failed."; exit 1; fi
          echo "First modification (const/4 v1, 0x1) applied."

          sudo sed -i 's/if-nez v1, :cond_42/if-nez v1, :cond_43/g' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "Second sed replacement failed."; exit 1; fi
          echo "Second modification (cond_42 to cond_43) applied."

          sudo sed -i 's/:cond_42/:cond_43/g' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "Third sed replacement failed."; exit 1; fi
          echo "Third modification (:cond_42 to :cond_43 label) applied."

          sudo sed -i 's/\(:try_end_43\)\n    .catchall {:try_start_29 .. :try_end_43} :catchall_26/\:try_end_44\n    .catchall {:try_start_29 .. :try_end_44} :catchall_26/g' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "Fourth sed replacement (try_end_43) failed."; exit 1; fi
          echo "Fourth modification (:try_end_43 to :try_end_44) applied."

          sudo sed -i 's/:goto_47/:goto_48/g' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "Fifth sed replacement (goto_47) failed."; exit 1; fi
          echo "Fifth modification (:goto_47 to :goto_48) applied."

          sudo sed -i 's/\(:try_start_47\)\n    monitor-exit v0\n    :try_end_48/\:try_start_48\n    monitor-exit v0\n    :try_end_49/g' "$SMALI_FILE"
          if [ $? -ne 0 ]; then echo "Sixth sed replacement (try_start/end_4x) failed."; exit 1; fi
          echo "Sixth modification (:try_start/end_4x) applied."

          echo "Recompiling services.jar..."
          sudo apktool b "$SMALI_DIR" -o "$SERVICES_JAR_PATH"
          if [ $? -ne 0 ]; then echo "Apktool recompilation failed."; exit 1; fi
          echo "services.jar recompiled successfully."

          sudo rm -rf "$SMALI_DIR"

      - name: Modify OPSystemUI.apk
        run: |
          APK_PATH="system/system_ext/priv-app/OPSystemUI/OPSystemUI.apk"
          DECOMPILED_DIR="OPSystemUI_decompiled"
          PLUGIN_SOURCE_DIR="${{ github.workspace }}/plugin_files"

          if [ ! -f "$APK_PATH" ]; then
            echo "Error: OPSystemUI.apk not found at $APK_PATH."
            exit 1
          fi

          echo "Decompiling $APK_PATH..."
          sudo apktool d -f "$APK_PATH" -o "$DECOMPILED_DIR"
          if [ $? -ne 0 ]; then echo "Apktool decompilation failed for OPSystemUI.apk."; exit 1; fi

          echo "Applying smali modifications..."

          OP_VOLUME_DIALOG_IMPL_FILE="$DECOMPILED_DIR/smali_classes2/com/oneplus/volume/OpVolumeDialogImpl.smali"
          if [ -f "$OP_VOLUME_DIALOG_IMPL_FILE" ]; then
            echo "Modifying OpVolumeDialogImpl.smali..."
            sudo sed -i '/:cond_11/{n;s/    const\/4 p0, 0x0/    const\/4 p0, 0x1/}' "$OP_VOLUME_DIALOG_IMPL_FILE"
            sudo sed -i 's/const\/16 v4, 0x13/const\/16 v4, 0x15/g' "$OP_VOLUME_DIALOG_IMPL_FILE"
          else
            echo "Warning: OpVolumeDialogImpl.smali not found. Skipping modification."
          fi

          OP_OUTPUT_CHOOSER_DIALOG_FILE="$DECOMPILED_DIR/smali_classes2/com/oneplus/volume/OpOutputChooserDialog.smali"
          if [ -f "$OP_OUTPUT_CHOOSER_DIALOG_FILE" ]; then
            echo "Modifying OpOutputChooserDialog.smali..."
            sudo sed -i '/:cond_11/{n;s/    const\/4 p0, 0x0/    const\/4 p0, 0x1/}' "$OP_OUTPUT_CHOOSER_DIALOG_FILE"
          else
            echo "Warning: OpOutputChooserDialog.smali not found. Skipping modification."
          fi

          VOLUME_DIALOG_IMPL_FILE="$DECOMPILED_DIR/smali/com/android/systemui/volume/VolumeDialogImpl.smali"
          if [ -f "$VOLUME_DIALOG_IMPL_FILE" ]; then
            echo "Modifying VolumeDialogImpl.smali..."
            sudo sed -i '/:cond_11/{n;s/    const\/4 p0, 0x0/    const\/4 p0, 0x1/}' "$VOLUME_DIALOG_IMPL_FILE"
          else
            echo "Warning: VolumeDialogImpl.smali not found. Skipping modification."
          fi

          DOZE_SENSORS_PICKUP_CHECK_FILE="$DECOMPILED_DIR/smali/com/android/systemui/doze/DozeSensors\$PickupCheck.smali"
          if [ -f "$DOZE_SENSORS_PICKUP_CHECK_FILE" ]; then
            echo "Modifying DozeSensors\$PickupCheck.smali..."
            sudo sed -i 's/0x1fa2652/0x1fa265c/g' "$DOZE_SENSORS_PICKUP_CHECK_FILE"
          else
            echo "Warning: DozeSensors\$PickupCheck.smali not found. Skipping modification."
          fi

          DOZE_MACHINE_STATE_FILE="$DECOMPILED_DIR/smali/com/android/systemui/doze/DozeMachine\$State.smali"
          if [ -f "$DOZE_MACHINE_STATE_FILE" ]; then
            echo "Modifying DozeMachine\$State.smali..."
            sudo sed -i '/.method screenState/{n;s/    const\/4 v1, 0x3/    const\/4 v1, 0x2/}' "$DOZE_MACHINE_STATE_FILE"
          else
            echo "Warning: DozeMachine\$State.smali not found. Skipping modification."
          fi

            echo "Applying Smali file replacement for OpCustomizeSettingsG2.smali..."

          TARGET_SMALI_DIR="$DECOMPILED_DIR/smali_classes2/com/oneplus/custom/utils"
          ORIGINAL_SMALI_FILE="$TARGET_SMALI_DIR/OpCustomizeSettingsG2.smali"
          NEW_SMALI_FILE="${{ github.workspace }}/my_G2/for_SystemUI/OpCustomizeSettingsG2.smali" 

          if [ ! -d "$TARGET_SMALI_DIR" ]; then
            echo "Error: Target Smali directory not found: $TARGET_SMALI_DIR"
            echo "Please verify the 'smali_classesX' folder (e.g., smali_classes2) or the path 'com/oneplus/custom/utils' within OPSystemUI.apk's decompiled structure."
            exit 1
          fi

          if [ -f "$ORIGINAL_SMALI_FILE" ]; then
            echo "Deleting original OpCustomizeSettingsG2.smali: $ORIGINAL_SMALI_FILE"
            sudo rm "$ORIGINAL_SMALI_FILE"
            if [ $? -ne 0 ]; then echo "Failed to delete original OpCustomizeSettingsG2.smali."; exit 1; fi
          else
            echo "Original OpCustomizeSettingsG2.smali not found at $ORIGINAL_SMALI_FILE (might be already deleted or path is wrong, proceeding)."
          fi

          if [ ! -f "$NEW_SMALI_FILE" ]; then
            echo "Error: New OpCustomizeSettingsG2.smali not found at source: $NEW_SMALI_FILE"
            echo "Please ensure '$NEW_SMALI_FILE' is in your repository and accessible."
            exit 1
          fi

          echo "Copying new OpCustomizeSettingsG2.smali from $NEW_SMALI_FILE to $TARGET_SMALI_DIR"
          sudo cp "$NEW_SMALI_FILE" "$TARGET_SMALI_DIR/"
          if [ $? -ne 0 ]; then echo "Failed to copy new OpCustomizeSettingsG2.smali."; exit 1; fi
          echo "OpCustomizeSettingsG2.smali replaced successfully."
          
          echo "Smali file replacement complete."

          echo "Smali modifications complete."

          PLUGIN_DEST_DIR="$DECOMPILED_DIR/smali_classes2/com/oneplus/plugin"
          echo "Replacing plugin files in $PLUGIN_DEST_DIR..."

          if [ ! -d "$PLUGIN_SOURCE_DIR" ]; then
            echo "Error: Source plugin directory '$PLUGIN_SOURCE_DIR' not found. Cannot replace plugin files."
            exit 1
          fi

          if [ -d "$PLUGIN_DEST_DIR" ]; then
            sudo rm -rf "$PLUGIN_DEST_DIR"/*
          else
            sudo mkdir -p "$PLUGIN_DEST_DIR"
          fi

          sudo cp -r "$PLUGIN_SOURCE_DIR"/* "$PLUGIN_DEST_DIR/"
          if [ $? -ne 0 ]; then echo "Error: Failed to copy new plugin files."; exit 1; fi
          echo "Plugin files replaced."

          echo "Recompiling OPSystemUI.apk..."
          sudo apktool b "$DECOMPILED_DIR" -o "OPSystemUI_unsigned.apk"
          if [ $? -ne 0 ]; then echo "Apktool recompilation failed for OPSystemUI.apk."; exit 1; fi

          echo "Recompiled OPSystemUI_unsigned.apk created."
          sudo rm -rf "$DECOMPILED_DIR"

      - name: Place Modified OPSystemUI.apk
        run: |
          MODIFIED_APK="OPSystemUI_unsigned.apk"
          TARGET_APK_DIR="system/system_ext/priv-app/OPSystemUI"

          if [ ! -f "$MODIFIED_APK" ]; then
            echo "Error: OPSystemUI_unsigned.apk not found."
            exit 1
          fi

          echo "Placing modified $MODIFIED_APK into $TARGET_APK_DIR/..."
          sudo rm -f "$TARGET_APK_DIR/OPSystemUI.apk"
          sudo mv "$MODIFIED_APK" "$TARGET_APK_DIR/OPSystemUI.apk"
          sudo chown 0:0 "$TARGET_APK_DIR/OPSystemUI.apk"
          sudo chmod 0644 "$TARGET_APK_DIR/OPSystemUI.apk"
          echo "Modified OPSystemUI.apk placed and permissions set."

      - name: Modify Settings.apk
        run: |
          SETTINGS_APK_DIR="system/system_ext/priv-app/Settings"
          SETTINGS_APK_PATH="$SETTINGS_APK_DIR/Settings.apk"
          DECOMPILED_SETTINGS_DIR="Settings_decompiled"

          if [ ! -f "$SETTINGS_APK_PATH" ]; then
            echo "Error: Settings.apk not found at $SETTINGS_APK_PATH."
            exit 1
          fi

          echo "Decompiling $SETTINGS_APK_PATH..."
          sudo apktool d -f "$SETTINGS_APK_PATH" -o "$DECOMPILED_SETTINGS_DIR"
          if [ $? -ne 0 ]; then echo "Apktool decompilation failed for Settings.apk."; exit 1; fi

          echo "Applying Smali file replacement for OpCustomizeSettingsG2.smali..."

          TARGET_SMALI_DIR="$DECOMPILED_SETTINGS_DIR/smali_classes2/com/oneplus/custom/utils"
          ORIGINAL_SMALI_FILE="$TARGET_SMALI_DIR/OpCustomizeSettingsG2.smali"
          NEW_SMALI_FILE="my_G2/for_Settings/OpCustomizeSettingsG2.smali"

          if [ ! -d "$TARGET_SMALI_DIR" ]; then
            echo "Error: Target Smali directory not found for Settings.apk: $TARGET_SMALI_DIR"
            echo "Please verify the 'smali_classesX' folder (e.g., smali_classes2) or the path 'com/oneplus/custom/utils' within Settings.apk's decompiled structure."
            exit 1
          fi

          if [ -f "$ORIGINAL_SMALI_FILE" ]; then
            echo "Deleting original OpCustomizeSettingsG2.smali: $ORIGINAL_SMALI_FILE"
            sudo rm "$ORIGINAL_SMALI_FILE"
            if [ $? -ne 0 ]; then echo "Failed to delete original OpCustomizeSettingsG2.smali."; exit 1; fi
          else
            echo "Original OpCustomizeSettingsG2.smali not found at $ORIGINAL_SMALI_FILE (might be already deleted or path is wrong, proceeding)."
          fi

          if [ ! -f "$NEW_SMALI_FILE" ]; then
            echo "Error: New OpCustomizeSettingsG2.smali not found at source: $NEW_SMALI_FILE"
            echo "Please ensure 'my_G2/OpCustomizeSettingsG2.smali' is in your repository and accessible."
            exit 1
          fi

          echo "Copying new OpCustomizeSettingsG2.smali from $NEW_SMALI_FILE to $TARGET_SMALI_DIR"
          sudo cp "$NEW_SMALI_FILE" "$TARGET_SMALI_DIR/"
          if [ $? -ne 0 ]; then echo "Failed to copy new OpCustomizeSettingsG2.smali."; exit 1; fi
          echo "OpCustomizeSettingsG2.smali replaced successfully."
          
          echo "Smali file replacement complete."

          echo "Recompiling Settings.apk..."
          sudo apktool b "$DECOMPILED_SETTINGS_DIR" -o "$SETTINGS_APK_PATH"
          if [ $? -ne 0 ]; then echo "Apktool recompilation failed for Settings.apk."; exit 1; fi
          echo "Settings.apk recompiled and replaced in its original location."

          sudo rm -rf "$DECOMPILED_SETTINGS_DIR"

          sudo chown 0:0 "$SETTINGS_APK_PATH"
          sudo chmod 0644 "$SETTINGS_APK_PATH"
          echo "Permissions for $SETTINGS_APK_PATH set."

      - name: Ensure system folder is readable
        run: |
          sudo chmod -R a+r system
          sudo chmod -R a+X system

      - name: Prepare make_ext4fs from repository
        run: |
          chmod +x make_ext4fs
          echo "$(pwd)" >> "$GITHUB_PATH"
          echo "make_ext4fs from repository root is ready."

      - name: Convert system folder to system.img with specific size
        run: |
          TARGET_SYSTEM_IMG_SIZE_BYTES=3221225472
          SYSTEM_FOLDER_SIZE=$(sudo du -bs system | awk '{print $1}')
          echo "Current system folder size: $SYSTEM_FOLDER_SIZE bytes"

          echo "Creating system.img from system/ folder with a max partition size of 3.22GB..."

          FILE_CONTEXTS_PATH=""
          if [ -f "system/file_contexts" ]; then
            FILE_CONTEXTS_PATH="system/file_contexts"
          elif [ -f "system/etc/selinux/plat_file_contexts" ]; then
            FILE_CONTEXTS_PATH="system/etc/selinux/plat_file_contexts"
          elif [ -f "system/etc/selinux/system_file_contexts" ]; then
            FILE_CONTEXTS_PATH="system/etc/selinux/system_file_contexts"
          else
            echo "Warning: file_contexts not found at common paths within 'system/'. New image might have SELinux issues on device boot."
          fi

          if [ -n "$FILE_CONTEXTS_PATH" ]; then
            make_ext4fs -s -S "$FILE_CONTEXTS_PATH" -L system -a /system -l "$TARGET_SYSTEM_IMG_SIZE_BYTES" system_new.img system/
          else
            make_ext4fs -s -L system -a /system -l "$TARGET_SYSTEM_IMG_SIZE_BYTES" system_new.img system/
          fi

          if [ $? -ne 0 ]; then echo "make_ext4fs failed to create system_new.img"; exit 1; fi
          mkdir -p firmware_images
          mv system_new.img firmware_images/system.img

          echo "system.img created. Size:"
          ls -lh firmware_images/system.img
          ls -l firmware_images/system.img | awk '{print $5 " bytes"}'

      - name: Clean Up needed for space
        run: |
          echo "Cleaning up for space..."
          sudo rm -rf system system_ext product odm opproduct firmware_extracted output payload_dumper *.zip *.rar *.7z system_ext.img product.img odm.img opproduct.img vendor.img custom_init
          echo "Cleanup complete."

      - name: Convert system.img to system.new.dat.br, system.transfer.list
        run: |
          echo "Cloning img2sdat tools..."
          git clone https://github.com/IsHacker003/img2sdat.git --depth=1 img2sdat_tools
          if [ ! -d "img2sdat_tools" ]; then echo "Failed to clone img2sdat tools."; exit 1; fi

          echo "Converting system.img to system.new.dat, system.patch.dat and system.transfer.list..."
          python3 img2sdat_tools/img2sdat.py firmware_images/system.img -o test -v 4
          if [ $? -ne 0 ]; then echo "img2sdat.py failed."; exit 1; fi

          echo "Compressing system.new.dat to system.new.dat.br..."
          brotli -q 11 test/system.new.dat -o test/system.new.dat.br
          if [ $? -ne 0 ]; then echo "Brotli compression failed."; exit 1; fi
          rm test/system.new.dat

          echo "Generated system.new.dat.br and system.transfer.list."

      - name: Zip Final Files for Release
        run: |
          BUILD_DATE=$(date +%Y%m%d)
          ROM_FILENAME="OnePlus-Port-ROM-$BUILD_DATE.zip"
          ROM_ZIP_PATH="test/$ROM_FILENAME" 
          echo "Zipping final files into $ROM_ZIP_PATH..."
          zip -r "$ROM_ZIP_PATH" test/system.new.dat.br test/system.patch.dat test/system.transfer.list
          if [ $? -ne 0 ]; then echo "Zipping failed."; exit 1; fi
          echo "ROM_ZIP_PATH=$ROM_ZIP_PATH" >> "$GITHUB_ENV"
          echo "ROM_FILENAME=$ROM_FILENAME" >> "$GITHUB_ENV"
          echo "$ROM_ZIP_PATH created."

      - name: Prepare Release Tag Name (for manual trigger)
        id: set_release_tag
        run: |
          ROM_BASE_NAME=$(basename "${{ env.ROM_FILENAME }}" .zip)
          RELEASE_TAG="release-${ROM_BASE_NAME}-$(date +%Y%m%d%H%M%S)-${{ github.run_number }}"
          echo "Generated tag for manual release: "$RELEASE_TAG"..."
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "RELEASE_TAG=$RELEASE_TAG" >> "$GITHUB_ENV"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.ROM_ZIP_PATH }}
          tag_name: ${{ steps.set_release_tag.outputs.release_tag }}
          name: Manual Port ROM Release - ${{ env.ROM_FILENAME }}
          body: |
            OnePlus OEM ROM Port - ${{ env.ROM_FILENAME }}

            This release contains the ported ROM for your device.
            This build was automatically generated.

            Changes included:
            - Custom build.prop modifications
            - `services.jar` patched for build consistency check bypass
            - Unwanted apps removed
            - Custom `init` binary (if provided)
            - System partition merged and re-imaged
            - Empty keylayout files created

            Flash at your own risk.

      - name: Clean Up
        run: |
          echo "Cleaning up workspace..."
          sudo rm -rf system system_ext product odm opproduct test firmware_extracted firmware_images img2sdat_tools payload_dumper.py *.zip *.rar *.7z *.img *.dat *.br custom_init
          echo "Cleanup complete."
